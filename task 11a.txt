public class LongestPalindromeSubstring {
    
    public static String longestPalindromeTab(String s) {
        int n = s.length();
        if (n < 2) return s;
        boolean[][] dp = new boolean[n][n];
        int start = 0, maxLen = 1;
                for (int i = 0; i < n; i++) dp[i][i] = true;
                for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    if (len == 2 || dp[i+1][j-1]) {
                        dp[i][j] = true;
                        if (len > maxLen) {
                            start = i;
                            maxLen = len;
                        }
                    }
                } else {
                    dp[i][j] = false;
                }
            }
        }
        return s.substring(start, start + maxLen);
    }
}
