import java.util.*;

class ConnectGroups {
    public static int connectTwoGroups(List<List<Integer>> cost) {
        int m = cost.size(), n = cost.get(0).size();
        int[] minCostB = new int[n];
        Arrays.fill(minCostB, Integer.MAX_VALUE);

        for (List<Integer> row : cost)
            for (int j = 0; j < n; j++)
                minCostB[j] = Math.min(minCostB[j], row.get(j));

        return dfs(cost, 0, 0, new HashMap<>(), minCostB);
    }

    private static int dfs(List<List<Integer>> cost, int i, int mask,
                           Map<String, Integer> memo, int[] minCostB) {
        int m = cost.size(), n = cost.get(0).size();
        if (i == m) {
            int extra = 0;
            for (int j = 0; j < n; j++)
                if ((mask & (1 << j)) == 0) extra += minCostB[j];
            return extra;
        }

        String key = i + "," + mask;
        if (memo.containsKey(key)) return memo.get(key);

        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            ans = Math.min(ans, cost.get(i).get(j) + dfs(cost, i + 1, mask | (1 << j), memo, minCostB));
        }
        memo.put(key, ans);
        return ans;
    }

    public static void main(String[] args) {
        List<List<Integer>> cost = Arrays.asList(
            Arrays.asList(15, 96),
            Arrays.asList(36, 2)
        );
        System.out.println("Minimum total cost: " + connectTwoGroups(cost));
    }
}
